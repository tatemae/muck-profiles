= MuckProfiles

Add profiles to muck users.  This implements a photo for users as well as a property bag that enables total customization of the user's profile information including privacy settings.

== Installation
Muck profile relies upon the muck-engine and muck-users gems as well as paperclip.  Add the following lines to your environment.rb file:

  config.gem "authlogic"
  config.gem "searchlogic"
  config.gem "bcrypt-ruby", :lib => "bcrypt"
  config.gem 'paperclip'
  config.gem 'muck-engine', :lib => 'muck_engine'
  config.gem 'muck-users', :lib => 'muck_users'
  config.gem 'muck-profiles', :lib => 'muck_profiles'
  config.gem 'geokit'

Next run rake gems:install

MuckProfiles uses geokit to determine a users location and to make it possible to find users that are within a given proximity.

Install the GeoKit Rails Plugin:

  script/plugin install git://github.com/andre/geokit-rails.git

Be sure to get api keys from Google an Yahoo.  Instructions for doing so can be found in config/initializers/geokit_config.rb after installing the plugin.  We recommend moving the keys into
global_config.yml:

Change the lines in config/initializers/geokit_config.rb to:
  Geokit::Geocoders::yahoo = GlobalConfig.yahoo_geo_key
  Geokit::Geocoders::google = GlobalConfig.google_geo_key

Put this in global_config.yml:
  google_geo_key: 'some key'  # API key for Google.  Get it here: http://www.google.com/apis/maps/signup.html
  yahoo_geo_key: 'some key'   # API key for Yahoo.  Get it here: http://developer.yahoo.com/faq/index.html#appid

# Profile configuration
  enable_guess_location: true # If true the profile system will attempt to determine the user's location via IP and populated with the location, lat and lon fields.
  
== Usage
Create a model called profile.rb and add 'acts_as_muck_profile'.  This mixes in the muck profile functionality but also permits further customization of the profile in your application.

  class Profile < ActiveRecord::Base
    acts_as_muck_profile
  end

Modify your user model so that it has a profile:

  class User < ActiveRecord::Base
    acts_as_authentic do |c|
      c.crypto_provider = Authlogic::CryptoProviders::BCrypt
    end
    acts_as_muck_user
    has_muck_profile
  end


Your user model will now appear to have a 'photo' which is delegated to the profile model:

  @user.photo # returns a photo object from paperclip

=== Profile Attributes
The profile comes preconfigured with a basic set of common profile options.  It is easy to add new fields.  Simply add the fields to the profile using a migration:

  class AddMoreFieldsToProfiles < ActiveRecord::Migration
    def self.up
      add_column :profiles, :occupation, :string
      add_column :profiles, :gender, :string
      add_column :profiles, :birthday, :datetime
      add_column :profiles, :company, :string
      add_column :profiles, :zip, :string
      add_column :profiles, :mobile_phone, :string
      add_column :profiles, :home_phone, :string
      add_column :profiles, :alumni_of, :string
      add_column :profiles, :relationship_status, :string
    end

    def self.down
      add_column :profiles, :occupation
      add_column :profiles, :gender
      add_column :profiles, :birthday
      add_column :profiles, :company
      add_column :profiles, :zip
      add_column :profiles, :mobile_phone
      add_column :profiles, :home_phone
      add_column :profiles, :alumni_of
      add_column :profiles, :relationship_status
    end
  end


Next create a new views/profiles/edit.html.erb file.  The built in file is very basic and makes it easy to add additional fields.  The 'profile_form' method will
create form elements for the built in fields.  Add extra fields after that.

  <div id="edit_content" class="span-24 colborder column">
    <%= output_errors(t('muck.profiles.problem_editing_profile'), {:class => 'help-box'}, @profile) %>
    <% profile_form(@profile) do |f| -%>
      <%# can add form fields as desired here -%>
    <% end -%>
  </div>

Last create view/profiles/show.html.erb.  There is a built in show page however it is assumed that most applications will implement a custom show page to hightlight
the focus of the system.

  <div class="span-24 colborder column">
    <%= icon @user, :thumb %>
    <p><%= @user.full_name %></p>
    <p><%= link_to t('muck.profiles.edit_profile'), edit_user_profile_path(@user) if @profile.can_edit?(current_user) %></p>
    <!-- Add more fields and customize the profile. -->
  </div>


Copyright (c) 2009 Tatemae, released under the MIT license
